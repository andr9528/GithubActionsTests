name: Automerge Main -> Staging -> Develop

on:
  push:
    branches: [ "main" ] # triggered when a push to 'main' happens.
  workflow_dispatch: # on button click

jobs:
  merge-main-to-staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Git config
        run: |
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --local user.name "GitHub Actions # ${GITHUB_ACTOR}"
      - name: Merge 'main' to 'staging'
        id: Merge
        continue-on-error: true
        run: |
          git fetch --unshallow
          git checkout staging
          git pull
          git merge --no-ff origin/main -m "Automerge 'main' to 'staging'. Action triggered by: ${GITHUB_ACTOR}."
          git push
      - name: Abort Merge
        if: steps.Merge.outcome == 'failure'
        run: |
          echo "Merge was a ${{steps.Merge.outcome}}."
          git merge --abort
      - name: Create PR on merge failure
        if: steps.Merge.outcome == 'failure'
        id: NewPr
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: 'Automerge Failure',
              owner,
              repo,
              head: 'main',
              base: 'staging',
              body: [
                'Failed to merge "main" into "staging".',
                'This PR is auto-generated by:',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
      - name: Comment on existing PR
        if: steps.NewPr.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const Pr = await github.rest.pulls.list({
              owner,
              repo, 
              state: 'open',
              head: 'main',
              base: 'staging'
            });
            core.info(JSON.stringify(Pr));
            const resultComment = await github.rest.issues.createComment({
            owner,
            repo, 
            issue_number: Pr.data.number,
            body: [
              'Failed to merge "main" into "staging".',
            ].join('\n')
            });


  merge-staging-to-develop:
    needs: merge-main-to-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Git config
        run: |
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --local user.name "GitHub Actions # ${GITHUB_ACTOR}"
      - name: Merge 'staging' to 'develop'
        id: Merge
        continue-on-error: true
        run: |
          git fetch --unshallow
          git checkout develop
          git pull
          git merge --no-ff origin/staging -m "Automerge 'staging' to 'develop'. Action triggered by: ${GITHUB_ACTOR}."
          git push
      - name: Abort Merge
        if: steps.Merge.outcome == 'failure'
        run: |
          echo "Merge was a ${{steps.Merge.outcome}}."
          git merge --abort
      - name: Create PR on merge failure
        if: steps.Merge.outcome == 'failure'
        id: NewPr
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const resultPr = await github.rest.pulls.create({
              title: 'Automerge Failure',
              owner,
              repo,
              head: 'staging',
              base: 'develop',
              body: [
                'Failed to merge "staging" into "develop".',
                'This PR is auto-generated by:',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
      - name: Comment on existing PR
        if: steps.NewPr.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const Pr = await github.rest.pulls.list({
              owner,
              repo, 
              state: 'open',
              head: 'staging',
              base: 'develop'
            });
            core.info(JSON.stringify(Pr));
            const resultComment = await github.rest.issues.createComment({
            owner,
            repo, 
            issue_number: Pr.data.number,
            body: [
              'Failed to merge "staging" into "develop".',
            ].join('\n')
            });

     